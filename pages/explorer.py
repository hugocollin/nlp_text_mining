import streamlit as st
import pydeck as pdk
import concurrent.futures
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from pages.resources.components import Navbar, get_personal_address, display_stars, process_restaurant, add_to_comparator, filter_restaurants_by_radius, display_restaurant_infos, AugmentedRAG, instantiate_bdd, stream_text
from pages.statistiques import display_restaurant_stats
from src.db.models import get_all_restaurants
from dotenv import find_dotenv, load_dotenv

# R√©cup√©ration de la cl√© API Mistral
load_dotenv(find_dotenv())

# Configuration de la page
st.set_page_config(page_title="SISE √î Resto - Explorer", page_icon="üçΩÔ∏è", layout="wide")

# Connexion √† la base de donn√©es
engine = create_engine('sqlite:///restaurant_reviews.db')
Session = sessionmaker(bind=engine)
session = Session()

# R√©cup√©ration de tous les restaurants
restaurants = get_all_restaurants(session)

# R√©cup√©ration de l'adresse personnelle
personal_address, personal_latitude, personal_longitude = get_personal_address()

# Fonction pour afficher le popup d'ajout de restaurant
@st.dialog("Ajouter un restaurant")
def add_restaurant_dialog():
    # Filtrage sur les restaurants non scrapp√©s
    scrapped_restaurants = [restaurant.nom for restaurant in restaurants if not restaurant.scrapped]
    options = ["S√©lectionner un restaurant"] + scrapped_restaurants

    # S√©lection du restaurant √† ajouter
    restaurant_select = st.selectbox(label="S√©lectionner un restaurant", label_visibility="collapsed", placeholder="S√©lectionner un restaurant", options=options, key="restaurant_select")
    
    # Scapping du restaurant s√©lectionn√©
    if st.button(icon="‚ûï", label="Ajouter le restaurant"):
        if restaurant_select != "S√©lectionner un restaurant":
            # [TEMP] Code pour scrapper le restaurant s√©lectionn√© et ajouter les informations √† la base de donn√©es
            st.session_state['restaurant_added'] = True
            st.rerun()
        else:
            st.warning("Veuillez s√©lectionner un restaurant", icon="‚ö†Ô∏è")

# Fonction pour afficher le popup d'informations sur un restaurant
@st.dialog("Informations sur le restaurant", width="large")
def restaurant_info_dialog():
    display_restaurant_infos(personal_address, personal_latitude, personal_longitude)

def main():
    # Barre de navigation
    Navbar()

    # V√©rification si une adresse personelle a √©t√© renseign√©e
    if not personal_address:
        if 'address_toast_shown' not in st.session_state:
            st.toast("Veuillez d√©finir votre adresse personnelle pour voir les temps de trajet", icon="‚ÑπÔ∏è")
            st.session_state['address_toast_shown'] = True

    # Initialisation du comparateur dans session_state
    if 'comparator' not in st.session_state:
        st.session_state['comparator'] = []

    # V√©rification si un restaurant a √©t√© s√©lectionn√© pour afficher ses statistiques
    selected_stats = st.session_state.get('selected_stats_restaurant')
    if selected_stats:
        display_restaurant_stats(selected_stats)
        return

    # Titre de la page
    st.title('üîç Explorer')

    # Mise en page du bouton d'ajout de restaurant
    add_restaurant_btn_col1, add_restaurant_btn_col2 = st.columns([3, 1])

    # Bouton pour ajouter un restaurant
    with add_restaurant_btn_col2:
        if st.button(icon="‚ûï", label="Ajouter un restaurant", key="add_restaurant_btn"):
            add_restaurant_dialog()
    
    # Popup de confirmation d'ajout de restaurant
    if st.session_state.get('restaurant_added'):
        st.toast("Restaurant ajout√© avec succ√®s", icon="‚ûï")
        st.session_state['restaurant_added'] = False

    # Cr√©ation d'une tab
    close_tab, filter_tab, ai_tab = st.tabs(["üîº", "üé® Filtres", "‚ú® Discuter avec l'IA"])

    with close_tab:
        st.write("")
    
    with filter_tab:
        # Conteneur pour la recherche et les filtres
        header_container = filter_tab.container(border=True)

        # Mise en page de la recherche et des filtres
        header_col1, header_col2 = header_container.columns(2)
        
        # Colonne pour les filtres
        with header_col1:
            # R√©cup√©ration des informations des restaurants scrapp√©s
            scrapped_restaurants = [
                {
                    "nom": restaurant.nom,
                    "latitude": restaurant.latitude,
                    "longitude": restaurant.longitude,
                    "etoiles_michelin": restaurant.etoiles_michelin,
                    "note_globale": restaurant.note_globale,
                    "qualite_prix_note": restaurant.qualite_prix_note,
                    "cuisine_note": restaurant.cuisine_note,
                    "service_note": restaurant.service_note,
                    "ambiance_note": restaurant.ambiance_note,
                    "cuisines": restaurant.cuisines,
                    "repas": restaurant.repas
                }
                for restaurant in [restaurant for restaurant in restaurants if restaurant.scrapped]
            ]

            # Checkbox pour activer/d√©sactiver le filtre par rayon
            container = header_col1.container(border=True)
            if personal_address:
                use_radius_filter = container.toggle(label="Recherche par distance autour du domicile", value=False, key="use_radius_filter")
                if use_radius_filter:
                    radius = container.slider("Distance de recherche autour du domicile (en m√®tres)", min_value=1, max_value=3000, step=1, value=500, key="radius_slider")
                
                    # Filtrage des restaurants par rayon si activ√©
                    filtered_restaurants = filter_restaurants_by_radius(scrapped_restaurants, personal_latitude, personal_longitude, radius)
                else:
                    radius = 1000000
                    filtered_restaurants = scrapped_restaurants
            else:
                use_radius_filter = container.toggle(label="Recherche par distance autour du domicile", value=False, key="use_radius_filter", disabled=True)
                radius = 1000000
                filtered_restaurants = scrapped_restaurants

            grades_col1, grades_col2 = st.columns(2)

            # Filtre par √©toiles Michelin
            container = grades_col1.container(border=True)
            option_map = {
                1: ":material/asterisk:",
                2: ":material/asterisk::material/asterisk:",
                3: ":material/asterisk::material/asterisk::material/asterisk:",
            }
            selected_michelin_stars = container.pills(
                "√âtoiles Michelin minimale",
                options=option_map.keys(),
                format_func=lambda option: option_map[option],
                selection_mode="single",
            )

            # Filtre par note globale
            container = grades_col2.container(border=True)
            container.write("Note globale minimale")
            global_rating = [1, 2, 3, 4, 5]
            global_rating_selected = container.feedback("stars", key="filter_global_stars")
            if global_rating_selected is None:
                global_rating_selected = 0

            # Filtre par note qualit√©-prix
            container = grades_col1.container(border=True)
            quality_price = container.slider(
                label="Note qualit√© prix minimale",
                min_value=0.0,
                max_value=5.0,
                step=0.1,
                value=0.0,
                key="filter_quality_price"
            )

            # Filtre par temps de trajet
            if personal_address:
                container = st.container(border=True)
                time_travel = container.slider(
                    label="Temps de trajet maximal (en minutes)",
                    min_value=0,
                    max_value=120,
                    step=1,
                    value=120,
                    key="filter_time_travel"
                )
            else:
                container = st.container(border=True)
                time_travel = container.slider(
                    label="Temps de trajet maximal (en minutes)",
                    min_value=0,
                    max_value=120,
                    step=1,
                    value=120,
                    disabled=True,
                    key="filter_time_travel"
                )
        
        with header_col2:

            # Filtre par note cuisine
            container = grades_col2.container(border=True)
            cuisine_note = container.slider(
                label="Note cuisine minimale",
                min_value=0.0,
                max_value=5.0,
                step=0.1,
                value=0.0,
                key="filter_cuisine_note"
            )

            # Filtre par note service
            container = grades_col1.container(border=True)
            service_note = container.slider(
                label="Note service minimale",
                min_value=0.0,
                max_value=5.0,
                step=0.1,
                value=0.0,
                key="filter_service_note"
            )

            # Filtre par note ambiance
            container = grades_col2.container(border=True)
            ambiance_note = container.slider(
                label="Note ambiance minimale",
                min_value=0.0,
                max_value=5.0,
                step=0.1,
                value=0.0,
                key="filter_ambiance_note"
            )

            # Filtre par cuisine
            container = st.container(border=True)
            cuisines = sorted(list(set([c.strip() for restaurant in scrapped_restaurants for c in restaurant["cuisines"].split(',') if c.strip()])))
            selected_cuisines = container.pills(
                label="Cuisine",
                options=cuisines,
                default=[],
                selection_mode = "multi",
                key="filter_cuisines"
            )

            # Filtre par type de repas
            container = st.container(border=True)
            meals = sorted(list(set([m.strip() for restaurant in scrapped_restaurants for m in restaurant["repas"].split(',') if m.strip()])))
            selected_meals = container.pills(
                label="Type de repas",
                options=meals,
                default=[],
                selection_mode = "multi",
                key="filter_meals"
            )

    # Tab pour le chat avec l'IA [TEMP]
    with ai_tab:
        # Mise en page du chat avec l'IA
        header_container = st.container(border=True)
        chat_container = header_container.container(height=500)

        # V√©rification si l'historique de la conversation est initialis√©
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Initialisation du mod√®le d'IA
        role_prompt="""
        Vous √™tes un assistant intelligent sp√©cialis√© dans la recommandation de restaurants Lyonnais. Utilisez uniquement les donn√©es disponibles sur le site pour fournir des recommandations pr√©cises et pertinentes. Votre r√¥le est d'aider les utilisateurs √† trouver des √©tablissements r√©pondant √† leurs pr√©f√©rences et besoins sp√©cifiques.

        Fonctionnalit√©s principales :
        1. **Compr√©hension des Pr√©f√©rences Utilisateur** : Analysez les pr√©f√©rences exprim√©es par l'utilisateur concernant le type de cuisine, le budget, l'emplacement, les options v√©g√©tariennes/vegan, et d'autres crit√®res pertinents.
        2. **Recommandations Personnalis√©es** : Proposez des listes de restaurants adapt√©s aux crit√®res de l'utilisateur, en fournissant des informations telles que le nom, l'adresse, le type de cuisine, les avis clients, les prix et les heures d'ouverture bas√©es sur les donn√©es disponibles.
        3. **Gestion des Contraintes** : Tenez compte des contraintes comme les restrictions alimentaires, la distance maximale, les m√©thodes de r√©servation disponibles et les exigences sp√©cifiques (par exemple, acc√®s handicap√©s).
        4. **Mises √† Jour en Temps R√©el** : Fournissez des informations actualis√©es sur la disponibilit√© des tables, les √©v√©nements sp√©ciaux, et les changements de menu en fonction des donn√©es du site.
        5. **Interaction Naturelle** : Communiquez de mani√®re claire et concise, en posant des questions suppl√©mentaires si n√©cessaire pour affiner les recommandations.
        6. **Respect de la Confidentialit√©** : Assurez-vous que toutes les interactions respectent la vie priv√©e des utilisateurs et que les donn√©es sensibles ne sont pas divulgu√©es.
        7. **Recherche Flexible** : Si l'utilisateur fournit une partie du nom d'un restaurant, essayez de trouver le restaurant le plus pertinent dans la base de donn√©es qui correspond √† cette partie du nom.

        Objectif :
        Aider les utilisateurs √† d√©couvrir et √† choisir des restaurants qui correspondent parfaitement √† leurs attentes, en offrant une exp√©rience utilisateur fluide et personnalis√©e bas√©e sur les informations disponibles sur le site.

        Consignes suppl√©mentaires :
        - Soyez courtois et professionnel dans vos r√©ponses.
        - Fournissez des informations v√©rifi√©es et √©vitez les recommandations bas√©es sur des donn√©es obsol√®tes.
        - Adaptez votre ton en fonction des pr√©f√©rences exprim√©es par l'utilisateur.
        - Si un des champs de restaurant est vide, None, etc... dans la base de donn√©es, indiquez que l'information n'est pas disponible et proposez de v√©rifier sur internet si n√©cessaire, en pr√©cisant la source des informations.
        """

        # Affichage de l'histoire de la conversation
        for message in st.session_state.messages:
            if message["role"] == "User":
                with chat_container.chat_message(message["role"], avatar="üë§"):
                    st.write(message["content"])

            elif message["role"] == "assistant":
                with chat_container.chat_message(message["role"], avatar="‚ú®"):
                    st.markdown(message["content"])
                    metrics = message["metrics"]
                    st.markdown(
                        f"üì∂ *Latence : {metrics['latency']:.2f} secondes* | "
                        f"üí≤ *Co√ªt : {metrics['euro_cost']:.6f} ‚Ç¨* | "
                        f"‚ö° *Utilisation √©nerg√©tique : {metrics['energy_usage']} kWh* | "
                        f"üå°Ô∏è *Potentiel de r√©chauffement global : {metrics['gwp']} kgCO2eq*"
                    )

        # Text input pour le chat avec l'IA
        if message := header_container.chat_input(placeholder="√âcrivez votre message", key="search_restaurant_temp"):
            if message.strip():

                # Affichage du message de l'utilisateur
                with chat_container.chat_message("user", avatar="üë§"):
                    st.write(message)

                # Ajout du message de l'utilisateur √† l'historique de la conversation
                st.session_state.messages.append({"role": "User", "content": message})

                # Initialisation des connaissances de l'IA si n√©cessaire
                if 'bdd_chunks' not in st.session_state:
                    st.session_state['bdd_chunks'] = instantiate_bdd()

                if 'llm' not in st.session_state:
                    st.session_state['llm'] = AugmentedRAG(
                        role_prompt=role_prompt,
                        generation_model="mistral-large-latest",
                        bdd_chunks=st.session_state['bdd_chunks'],
                        top_n=3,
                        max_tokens=3000,
                        temperature=0.3,
                    )

                llm = st.session_state['llm']

                # R√©cup√©ration de la r√©ponse de l'IA
                response = llm(
                    query=message,
                    history=st.session_state.messages,
                )

                # Affichage de la r√©ponse de l'IA
                with chat_container.chat_message("AI", avatar="‚ú®"):
                    st.write_stream(stream_text(response["response"]))
                    st.markdown(
                        f"üì∂ *Latence : {response['latency']:.2f} secondes* | "
                        f"üí≤ *Co√ªt : {response['euro_cost']:.6f} ‚Ç¨* | "
                        f"‚ö° *Utilisation √©nerg√©tique : {response['energy_usage']} kWh* | "
                        f"üå°Ô∏è *Potentiel de r√©chauffement global : {response['gwp']} kgCO2eq*"
                    )

                # Ajout de la r√©ponse de l'IA √† l'historique de la conversation
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response["response"],
                    "metrics": {
                        "latency": response["latency"],
                        "euro_cost": response["euro_cost"],
                        "energy_usage": response["energy_usage"],
                        "gwp": response["gwp"]
                    }
                })

    # Mise en page des r√©sultats
    results_display_col1, results_display_col2 = st.columns([3, 2])
    
    # Affichage des r√©sultats
    with results_display_col1:
        
        # Parall√©lisation du traitement des restaurants
        with st.spinner("Chargement des restaurants..."):
            with concurrent.futures.ThreadPoolExecutor() as executor:
                # Map des restaurants scrapp√©s aux futurs
                futures = {
                    executor.submit(process_restaurant, personal_address, personal_latitude, personal_longitude, restaurant): restaurant
                    for restaurant in restaurants
                    if restaurant.scrapped
                }
                # Collecte des r√©sultats dans l'ordre des restaurants
                results = []
                for restaurant in restaurants:
                    if restaurant.scrapped:
                        future = next(f for f, r in futures.items() if r == restaurant)
                        try:
                            result = future.result()
                            results.append(result)
                        except Exception as e:
                            st.error(f"Erreur lors du traitement du restaurant {restaurant.nom}: {e}")

        # Filtrage des r√©sultats en fonction des filtres
        filtered_results = []
        for result in results:
            restaurant, tcl_url, fastest_mode = result

            # Filtrage par √©toiles Michelin
            if selected_michelin_stars:
                if not (restaurant.etoiles_michelin >= selected_michelin_stars):
                    continue
            
            # Filtrage par note globale
            if not (global_rating[global_rating_selected] <= restaurant.note_globale):
                continue
            
            # Filtrage par note qualit√©-prix
            if quality_price > 0:
                if restaurant.qualite_prix_note is None or restaurant.qualite_prix_note < quality_price:
                    continue

            # Filtrage par note cuisine
            if cuisine_note > 0:
                if restaurant.cuisine_note is None or restaurant.cuisine_note < cuisine_note:
                    continue

            # Filtrage par note service
            if service_note > 0:
                if restaurant.service_note is None or restaurant.service_note < service_note:
                    continue

            # Filtrage par note ambiance
            if ambiance_note > 0:
                if restaurant.ambiance_note is None or restaurant.ambiance_note < ambiance_note:
                    continue
            
            # Filtrage par temps de trajet
            if tcl_url:
                duration_str = fastest_mode[1]
                if 'h' in duration_str:
                    parts = duration_str.split('h')
                    hours = int(parts[0])
                    minutes = int(parts[1].replace('min', '')) if parts[1] else 0
                    duration = hours * 60 + minutes
                else:
                    duration = int(duration_str.replace('min', ''))
                if not (duration <= time_travel):
                    continue
            
            # Filtrage par cuisine
            if selected_cuisines:
                restaurant_cuisines = [c.strip() for c in restaurant.cuisines.split(',')]
                if not any(cuisine in restaurant_cuisines for cuisine in selected_cuisines):
                    continue
            
            # Filtrage par type de repas
            if selected_meals:
                restaurant_meals = [m.strip() for m in restaurant.repas.split(',')]
                if not any(meal in restaurant_meals for meal in selected_meals):
                    continue
            filtered_results.append(result)

        # Extraction des restaurants filtr√©s pour la carte
        filtered_restaurants = [
            (
                result[0].nom,
                result[0].latitude,
                result[0].longitude
            )
            for result in filtered_results
            if result[0] is not None
        ]

        # R√©cup√©ration des coordonn√©es des restaurants pour la carte
        map_data = []
        for restaurant in filtered_restaurants:
            nom, lat, lon = restaurant
            map_data.append({
                'name': nom,
                'latitude': lat,
                'longitude': lon
            })

        # Filtrage des restaurants par rayon
        if personal_address:
            map_data = filter_restaurants_by_radius(
                map_data,
                personal_latitude,
                personal_longitude,
                radius
            )
            # Obtention des noms des restaurants filtr√©s
            filtered_names = [restaurant['name'] for restaurant in map_data]
            # Filtrage des r√©sultats en fonction des noms filtr√©s
            filtered_results = [result for result in filtered_results if result[0].nom in filtered_names]

        # Affichage du nombre de restaurants trouv√©s
        if not filtered_results:
            st.info("‚ÑπÔ∏è Aucun restaurant trouv√©, essayez de modifier vos crit√®res de recherche.")
        elif (filtered_results and len(filtered_results) == 1):
            st.info("‚ÑπÔ∏è 1 restaurant trouv√©")
        else:
            st.info(f"‚ÑπÔ∏è {len(filtered_results)} restaurants trouv√©s")
        
        container = st.container(height=1000, border=False)

        with container:

            # Affichage uniquement des restaurants filtr√©s
            for result in filtered_results:
                restaurant, tcl_url, fastest_mode = result
                container = st.container(border=True)
                col1, col2, col3, col4, col5 = container.columns([3.5, 1, 1, 1, 2.5])
                
                # Affichage des informations du restaurant
                with col1:
                    col1.write(restaurant.nom)
                    stars = display_stars(restaurant.note_globale)
                    col1.image(stars, width=20)

                # Affichage du bouton d'information
                with col2:
                    if col2.button(label="‚ÑπÔ∏è", key=f"info_btn_{restaurant.id_restaurant}"):
                        st.session_state['selected_restaurant'] = restaurant
                        restaurant_info_dialog()
                
                # Affichage du bouton de statistiques
                with col3:
                    if col3.button("üìä", key=f"stats_btn_{restaurant.id_restaurant}"):
                        st.session_state['selected_stats_restaurant'] = restaurant
                        st.rerun()

                # Affichage du bouton de comparaison
                with col4:
                    if col4.button("üÜö", key=f"compare_btn_{restaurant.id_restaurant}"):
                        add_to_comparator(restaurant)
                
                # Affichage du bouton de trajet
                with col5:
                    emoji, fastest_duration = fastest_mode
                    bouton_label = f"{emoji} {fastest_duration}"
                    button_key = f"trajet_btn_{restaurant.id_restaurant}"
                    if tcl_url:
                        col5.markdown(f'''
                            <style>
                                .custom-button {{
                                    display: block;
                                    padding: 6px 12px;
                                    margin-bottom: 15px;
                                    color: #31333e;
                                    border: 1px solid #d6d6d8;
                                    border-radius: 8px;
                                    cursor: pointer;
                                    background-color: transparent;
                                    transition: background-color 0.3s;
                                }}
                                .custom-button:hover {{
                                    color: #FF4B4B;
                                    border-color: #FF4B4B;
                                }}
                                .custom-button:active {{
                                    background-color: #FF4B4B;
                                }}
                                @media (prefers-color-scheme: dark) {{
                                    .custom-button {{
                                        color: #fafafa;
                                        border-color: #3e4044;
                                        background-color: #14171f;
                                    }}
                                }}
                            </style>
                            <a href="{tcl_url}" target="_blank" style="text-decoration: none;">
                                <button class="custom-button">{bouton_label}</button>
                            </a>
                        ''', unsafe_allow_html=True)
                    else:
                        col5.button(bouton_label, key=button_key, disabled=True)
    
    # Affichage de la carte
    with results_display_col2:
        with st.spinner("Chargement de la carte..."):
            # Mise en forme du radius et de la couleur du domicile
            if radius == 1000000:
                radius = 25
                color = '[0, 0, 255]'
            else:
                color = '[0, 0, 255, 100]'

            # Ajout des coordonn√©es du domicile s'il est d√©fini
            if personal_address:
                latitude = personal_latitude
                longitude = personal_longitude
                map_data.append({
                    'name': 'Domicile',
                    'latitude': personal_latitude,
                    'longitude': personal_longitude
                })
            else:
                latitude, longitude = 45.7640, 4.8357 # Coordonn√©es de Lyon

            view_state = pdk.ViewState(
                latitude=latitude,
                longitude=longitude,
                zoom=12,
                pitch=0
            )

            # Param√®tres du point du domicile (bleu)
            home_layer = pdk.Layer(
                'ScatterplotLayer',
                data=[point for point in map_data if point['name'] == 'Domicile'],
                get_position='[longitude, latitude]',
                get_color=color,
                get_radius=radius,
                pickable=True,
                auto_highlight=True
            )

            # Param√®tres des points des restaurants (rouge)
            restaurants_layer = pdk.Layer(
                'ScatterplotLayer',
                data=[point for point in map_data if point['name'] != 'Domicile'],
                get_position='[longitude, latitude]',
                get_color='[255, 0, 0]',
                get_radius=25,
                pickable=True,
                auto_highlight=True
            )

            # Ajout des points √† afficher sur la carte
            layers = [restaurants_layer, home_layer]

            # Param√®tres des infos-bulles
            tooltip = {
                "html": "<b>{name}</b>",
                "style": {
                    "backgroundColor": "white",
                    "color": "black"
                }
            }

            # Affichage de la carte
            deck = pdk.Deck(
                layers=layers,
                initial_view_state=view_state,
                tooltip=tooltip,
                map_style='mapbox://styles/mapbox/light-v11'
            )

            # Affichage de la carte
            st.pydeck_chart(deck)

if __name__ == '__main__':
    main()